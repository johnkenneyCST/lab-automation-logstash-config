input{
    file {
        path => "C:/Users/jkenney/Desktop/sample-biomek-log/Details*.log"
        codec => plain {
            charset => "ISO-8859-1"
        }
        start_position => "beginning"
        # sincedb_path => "NUL"
        add_field => {
          "system" => "i5"
        }
    }
}

filter {
  #Creating and adding a unique id to every event
  mutate {
    add_field => { "unique_id" => "%{[log][file][path]}" }
  }
  mutate {
    gsub => [ "unique_id", ".*/", "" ]  # Extract just the filename
  }

  # Storing each timestamp temporarily everytime we see one, overwritten everytime a new timestamp is caught
  if [message] =~ /^(\d{2}\/\d{2}\/\d{4} \d{2}:\d{2}:\d{2})/ {
    grok {
      match => { "message" => "^%{MONTHNUM:month}/%{MONTHDAY:day}/%{YEAR:year} %{TIME:time}" }
    }
    
    # Convert extracted timestamp into the desired format (YYYY-MM-DD HH:mm:ss)
    mutate {
      add_field => { "formatted_timestamp" => "%{year}-%{month}-%{day} %{time}" }
    }

    # Store the timestamp in the aggregate map
    aggregate {
      task_id => "%{unique_id}"
      code => "map['last_timestamp'] = event.get('formatted_timestamp')"
      map_action => "update"
      end_of_task => false
    }
  }

  # Extracting the method name. Typically the first line of biomek log files.
  if [message] =~ "Method = " { 
    grok {
      match => { 
        "message" => "Method\s*=\s*%{GREEDYDATA:method_name} \r?"
      }
      tag_on_failure => ["grokparsefailure"]
    }

    ## Adding method name to map, will be accessible later on
    aggregate {
      task_id => "%{unique_id}"
      code => "map['method_name'] = event.get('method_name')"
      map_action => "create"
      end_of_task => false
    }
  }

  # Getting the start time of the method
  elseif [message] =~ "Started " {
    grok {
      match => {
        "message" => "Started %{MONTHNUM:month_num}/%{MONTHDAY:month_day}/%{YEAR:year} %{TIME:time}"
      }
      tag_on_failure => ["grokparsefailure"]
    }
    mutate {
      add_field => {"start_time" => "%{year}-%{month_num}-%{month_day} %{time}"}
    }
    date {
      match => ["start_time", "yyyy-MM-dd HH:mm:ss"]
      target => "start_time"
    }

    aggregate {
      task_id => "%{unique_id}"
      code => "map['method_start_time'] = event.get('start_time')"
      map_action => "update"
      end_of_task => false
    }
  }

  # Event for the end of the method
  elseif [message] =~ "Clear globals" {
    grok {
      match => {
        "message" => "Clear globals"
      }
      tag_on_failure => ["grokparsefailure"]
    }

    aggregate {
      task_id => "%{unique_id}"
      code => "event.set('temp_timestamp',map['last_timestamp'])"
      map_action => "update"
      end_of_task => false
    }

    date {
      match => ["temp_timestamp", "yyyy-MM-dd HH:mm:ss"]
      target => "method_end_time"
    }

    aggregate {
      task_id => "%{unique_id}"
      code => "event.set('method_start_time', map['method_start_time'])
               event.set('method_name', map['method_name'])  
      "
    }

    aggregate {
      task_id => "%{unique_id}"
      code => "
        if event.get('method_start_time') != nil and event.get('method_end_time') != nil and event.get('method_name') != nil
          start_time = event.get('method_start_time').is_a?(LogStash::Timestamp) ? event.get('method_start_time').time : Time.parse(event.get('method_start_time').to_s)
          end_time = event.get('method_end_time').is_a?(LogStash::Timestamp) ? event.get('method_end_time').time : Time.parse(event.get('method_end_time').to_s)

          total_time = (end_time - start_time).to_i 

          event.set('total_time', total_time)
          event.set('complete', true)
        end



      "
      map_action => "update"
      end_of_task => true
    }
    if [complete] {
      mutate {
        add_tag => ["completed_task"]
        remove_field => ["complete"]
      }
    }
    mutate {
      remove_field => ["message", "@version", "event", "temp_timestamp"]
    }

  }
}




output {
  # Conditional check for grokparsefailure tag
  if "grokparsefailure" not in [tags] and "completed_task" in [tags]{
    elasticsearch {
      hosts => ["https://cstwebsearch-dev.es.us-east-1.aws.found.io:9243"]
      index => "lab-automation-dev-sample-index"  # Index name for successfully parsed logs
      user => "logstash_internal"  # Elasticsearch username
      password => "@Automation_u$er25"  # Elasticsearch password
      ssl => true
    }
  }

}
