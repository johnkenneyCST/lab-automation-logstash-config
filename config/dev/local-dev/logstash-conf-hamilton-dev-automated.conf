input{
    file {
        path => "C:/Users/jkenney/Desktop/sample-hamilton-log/*.trc"
        codec => plain {
            charset => "ISO-8859-1"
        }
        start_position => "beginning"
        # Commented out so the path can be tracked
        # sincedb_path => "NUL"
        mode => "tail"
        file_completed_action => "log"
        close_older => "24h"
        add_field => {
          "system" => "dev_env"
        }
    }
}

filter {
  # Adding a unique identifier to the file (This case would be the filename)
  mutate {
    add_field => { "unique_id" => "%{[log][file][path]}" }
  }
  mutate {
    gsub => [ "unique_id", ".*/", "" ]  # Extract just the filename
  }
  ruby {
    code=> "puts event.get('unique_id')"
    }

  # Filter for 'Analyze method - start'
  if [message] =~ "SYSTEM : Analyze method - start; " {
    grok {
        match => {
            "message" => "%{TIMESTAMP_ISO8601}> SYSTEM : Analyze method - start; Method file %{GREEDYDATA:file_path}(?=.hsl)\r?"
        }
        tag_on_failure => ["grokparsefailure"]
    }
    mutate {
        add_field => { "method_name" => "%{file_path}" }
    }
    mutate {
        gsub => [
          "method_name", "^.*[\\\\]", ""   # Remove everything before the last backslash, including the backslash
        ]
    }

    ruby {
    code=> "puts event.get('method_name')"
    }
    # Dont need the file path
    mutate {
      remove_field => [ "file_path" ]
    }
    # Using the aggregate function to store the method name across multiple events
    aggregate {
      task_id => "%{unique_id}"
      code => "map['method_name'] = event.get('method_name')"
      map_action => "create"
      end_of_task => false
    }
     

  }
  # Filter for 'Start method - start'
  elseif [message] =~ "SYSTEM : Start method - start" {
    grok {
      match => {
        "message" => "%{TIMESTAMP_ISO8601:method_start_time}> SYSTEM : Start method - start;\r?"
      }
      tag_on_failure => ["grokparsefailure"]
    }
    mutate {
        remove_field => [ "message" ]
      }
    date {
      match => ["method_start_time", "yyyy-MM-dd HH:mm:ss"]
      target => "method_start_time"
    }
    ruby {
    code=> "puts event.get('method_start_time')"
    }

    aggregate {
      task_id => "%{unique_id}"
      code => "map['method_start_time'] = event.get('method_start_time')"
      map_action => "update"
      end_of_task => false
    }


  }
  # Filter for 'End method - complete'
  elseif [message] =~ "SYSTEM : End method - complete" {
    ruby {
    code=> "puts 'WE IN HERE'"
    }
    grok {
      match => {
        "message" => "%{TIMESTAMP_ISO8601:method_end_time}> SYSTEM : End method - complete;\r?"
      }
      tag_on_failure => ["grokparsefailure"]
    }
    mutate {
        remove_field => [ "message" ]
    }
    aggregate {
      task_id => "%{unique_id}"
      code => "event.set('method_start_time', map['method_start_time'])"
      map_action => "update"
      end_of_task => false
    }

    date {
      match => ["method_end_time", "yyyy-MM-dd HH:mm:ss"]
      target => "method_end_time"
    }
    ruby {
    code=> "puts event.get('method_end_time')"
    }

    aggregate {
      task_id => "%{unique_id}"
      code => "event.set('method_name', map['method_name'])"
      map_action => "update"
      end_of_task => false
    }
    aggregate {
      task_id => "%{unique_id}"
      code => "map['method_end_time'] = event.get('method_end_time')"
      map_action => "update"
      end_of_task => false  # Marks this as the last event for the task
    }

    aggregate {
      task_id => "%{unique_id}"
      code => "
        if event.get('method_start_time') != nil and event.get('method_end_time') != nil and event.get('method_name') != nil
          start_time = event.get('method_start_time').is_a?(LogStash::Timestamp) ? event.get('method_start_time').time : Time.parse(event.get('method_start_time').to_s)
          end_time = event.get('method_end_time').is_a?(LogStash::Timestamp) ? event.get('method_end_time').time : Time.parse(event.get('method_end_time').to_s)

          total_time = (end_time - start_time).to_i 

          event.set('total_time', total_time)
          event.set('complete', true)
        end
      "

      map_action => "update"
      end_of_task => true
    }
    if [complete] {
      mutate {
        add_tag => ["completed_task"]
        remove_field => ["complete"]
      }
    }
    mutate {
      remove_field => ["message", "@version", "event", "temp_timestamp"]
    }
  }
 

  # Drop unneeded messages
  else {
    drop {}
  }
}




output {
  # Conditional check for grokparsefailure tag
  if "grokparsefailure" not in [tags] and "completed_task" in [tags]{
    elasticsearch {
      hosts => ["http://localhost:9200"]
      index => "hamilton-log-files"  # Index name for successfully parsed logs
      user => "john"  # Elasticsearch username
      password => "@Gull$2023"  # Elasticsearch password
    }
    #Output to stdout for debugging purposes
    stdout { codec => rubydebug }
  }

}
